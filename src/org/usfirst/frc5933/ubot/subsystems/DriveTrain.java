// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.ubot.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc5933.ubot.RobotMap;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon frontLeftMotor = RobotMap.driveTrainFrontLeftMotor;
    private final CANTalon rearLeftMotor = RobotMap.driveTrainRearLeftMotor;
    private final CANTalon frontRightMotor = RobotMap.driveTrainFrontRightMotor;
    private final CANTalon rearRightMotor = RobotMap.driveTrainRearRightMotor;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private boolean isReversed = false;
    public static final double RIGHT_DRIVE_MULTIPLIER = 1.0;
    public static final double LEFT_DRIVE_MULTIPLIER = 1.0;

    
    public static final double TURBO_FAST_MULTIPLIER = 1.0;
    public static final double TURBO_SLOW_MULTIPLIER = 0.5;
    private double turboMultiplier = TURBO_FAST_MULTIPLIER;

    // Maximum change in voltage, in volts / sec. (0 to 24 volts in 1 second)
    // According to Talon SRX manual (1.15) the max value should be 10. However,
    // when I tried a value of 10 the robot response time was very laggy. So I thought
    // I would give 24 a shot, lo and behold it seemed to work just fine. This value seemed
    // to give us the best trade of between lag (response time to commands) and not browning
    // out the robot due to to much current draw.
    private static final int RAMP_RATE_IN_SECONDS = 24; 
    
	private AnalogGyro gyro_ = RobotMap.sensorsAnalogGyro;
	
	public static final int TURN_MAX_TRIES = 1000;

    private static final double Kp = 0.03;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

	public DriveTrain() {
		super();
		gyro_.initGyro();
		setRampRateToEliminateBrownOuts();
	}
	
	public DriveTrain(String name) {
		super(name);
		gyro_.initGyro();
	}
	
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    public void arcadeDrive(Joystick stick) {
    	double y = stick.getY();
    	double x = stick.getX();
    	if (isReversed) {
    		y *= -1;
    		x *= -1;
    	}

    	y *= turboMultiplier;
    	x *= turboMultiplier;
    	// TODO: if we want the arcade to drive straight, we will need
    	// to scale x by some factor.
    	// I think the best way to do this is to temporarily set x to zero,
    	// drive the robot using only the y value and slowly change x by some
    	// multiplier value until it goes straight. Then let the value of
    	// x remain like it should and see how well it works. Make sure to handle
    	// the cases where x is: 0, -, +.
    	robotDrive.arcadeDrive(y, x);
    }

    public void stop() {
		robotDrive.stopMotor();
    }

    public void driveStraight(double speed) {
		double angle = gyro_.getAngle();
        robotDrive.drive(speed, -angle * Kp);
    }

	public AnalogGyro getGyro() {
		return gyro_;
	}
    
    public void set(double speed) {
		frontLeftMotor.set(speed);
		frontRightMotor.set(speed);
		rearRightMotor.set(speed);
		rearLeftMotor.set(speed);
    }
    
    public void toggleTurbo() {
    	if (turboMultiplier == TURBO_FAST_MULTIPLIER) {
    		turboMultiplier = TURBO_SLOW_MULTIPLIER;
    	} else {
    		turboMultiplier = TURBO_FAST_MULTIPLIER;
    	}
    }
    
    public void reverseControls() {
    	robotDrive.tankDrive(0, 0);
    	// delay the reverse by a second or so so we don't blow the drive train.
    	Timer.delay(1.0);
    	isReversed = !isReversed;
    }
    
    public void turnDegrees(double speed, double degrees) {
		gyro_.reset();
    	final double startingAngle = gyro_.getAngle();
		double now = startingAngle;
		final double desired = now + degrees;
		
		int tries = TURN_MAX_TRIES;
		
		if (desired > startingAngle) {
			do {
				robotDrive.tankDrive(-speed, speed);
				now = gyro_.getAngle();
				--tries;
				if (tries == 0) {
					System.err.println("Failed to turn specified degrees.");
					break;
				}
			} while (now < desired);
		} else {
			do {
				robotDrive.tankDrive(speed, -speed);
				now = gyro_.getAngle();
				--tries;
				if (tries == 0) {
					System.err.println("Failed to turn specified degrees.");
					break;
				}
			} while (now > startingAngle + degrees);
		}
		
		stop();
    }

    
    // FIXME: The following align methods don't work all that well. When I initially tested
    // them, the relied upon the fact that the gyro was only reset during initialization. 
    // Since that time the gyro reset has been sprinkled around on this class, and so it is
    // guaranteed that the following 2 align methods wont work. It should be fairly easy to 
    // fix the reliance upon the rest only being called once by getting the center value 
    // from the gryo.
    // All in all, im not sure that these methods will be useful anyways. For the robot to
    // reliably align itself, it has to run in half speed. The intention of using the
    // align methods in teleop means that we would run 1/2 speed to align.
    
    /**
        aligns the robot to 0 degrees, which would be the starting orientation
        @param speed 
        inputs the speed at which to turn
    **/
    public void alignZeroDegrees(double speed){
		int tries = TURN_MAX_TRIES;
        double degreesToTurn = gyro_.getAngle() %  360;
        int amountOfRotations = (int) gyro_.getAngle() / 360;

        if (degreesToTurn < 180) {
            while (amountOfRotations == (int) (gyro_.getAngle() / 360)) {
                    robotDrive.drive(speed, 1);
                    degreesToTurn = gyro_.getAngle() %  360;
    				--tries;
    				if (tries == 0) {
    					System.err.println("Failed to turn align to zero degrees.");
    					break;
    				}
            }
        } else if (degreesToTurn > 180) {
            while (amountOfRotations == (int) (gyro_.getAngle() / 360)) {
                while (degreesToTurn < 0) {
                    robotDrive.drive(speed, -1);
                    degreesToTurn = gyro_.getAngle() %  360;
    				--tries;
    				if (tries == 0) {
    					System.err.println("Failed to turn align to zero degrees.");
    					break;
    				}
                }
            }
        }
    }

    /**
        aligns the robot to 180 degrees, which is facing the opposite of starting position
        @param speed
        inputs the speed at which to turn
    **/
    public void align180Degrees(double speed) {
        double degreesToTurn = gyro_.getAngle() % 360;
		int tries = TURN_MAX_TRIES;

        if (degreesToTurn < 180) {
            while(degreesToTurn < 180) {
                robotDrive.drive(speed, -1);
                degreesToTurn = gyro_.getAngle() %  360;
				--tries;
				if (tries == 0) {
					System.err.println("Failed to turn align to 180 degrees.");
					break;
				}
            }
        } else if (degreesToTurn > 180) {

            while (degreesToTurn > 180) {
                robotDrive.drive(speed, 1);
                degreesToTurn = gyro_.getAngle() %  360;
				--tries;
				if (tries == 0) {
					System.err.println("Failed to turn align to 180 degrees.");
					break;
				}
            }
        }
    }
    
    public void enableBrakeMode(boolean enable) {
    	frontLeftMotor.enableBrakeMode(enable);
    	rearLeftMotor.enableBrakeMode(enable);
    	frontRightMotor.enableBrakeMode(enable);
    	rearRightMotor.enableBrakeMode(enable);
    }
    
    private void setRampRateToEliminateBrownOuts() {
    	frontLeftMotor.setVoltageRampRate(RAMP_RATE_IN_SECONDS);
    	rearLeftMotor.setVoltageRampRate(RAMP_RATE_IN_SECONDS);
    	frontRightMotor.setVoltageRampRate(RAMP_RATE_IN_SECONDS);
    	rearRightMotor.setVoltageRampRate(RAMP_RATE_IN_SECONDS);
    }
    
	public void changeControlMode(TalonControlMode mode) {
		frontLeftMotor.changeControlMode(mode);
		frontRightMotor.changeControlMode(mode);
		rearLeftMotor.changeControlMode(mode);
		rearRightMotor.changeControlMode(mode);
	}
	
}
