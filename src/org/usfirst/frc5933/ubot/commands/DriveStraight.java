// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.ubot.commands;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5933.ubot.Robot;
import org.usfirst.frc5933.ubot.RobotMap;

/**
 *
 */
public class DriveStraight extends Command {
    private double inches_ = 0;
    private double speed_ = 0;
    private boolean useDumbDashboard_ = true;
    private int tickCount_ = 0;
    public final static double SOME_MULTIPLIER = 5.5;

    public DriveStraight(double speed, double inches) {
        speed_ = speed;
        inches_ = inches;
        useDumbDashboard_ = false;
    }


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStraight() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES


    }

    // Called just before this Command runs the first time
    protected void initialize() {
        if (useDumbDashboard_) {
            speed_ = .8;
            inches_ = SmartDashboard.getNumber("Inches for driving");
        }

        // TODO: Until we get the whole encoder thang worked out,
        // we shouldn't do this.
        // Robot.driveTrain.changeControlMode(CANTalon.TalonControlMode.Position);

        Robot.driveTrain.enableBrakeMode(true);
        tickCount_ = (int)(inches_ * SOME_MULTIPLIER);
        RobotMap.helmsman.resetGyro();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

        // RobotMap.helmsman.resetGyro();
        // double angle = RobotMap.helmsman.getGyroAngle();
        // robotDrive.drive(speed, -angle * Kp);
        int absoluteCount_ = 0;
        while (tickCount_ > 0) {

            double angle = RobotMap.helmsman.getGyroAngle();
            double curve = angle * 0.003; //worked 2/23/16 as 0.003 
            Robot.driveTrain.driveStraight(-speed_, -curve); //DO NOT change this

            //System.out.println("Ultrasonic: " + RobotMap.sensorsUtrasonic.getAverageValue());
            System.out.println("Ultrasonic Raw: " + RobotMap.helmsman.getForwardUltrasonicDistance());


            if (RobotMap.helmsman.getForwardUltrasonicDistance() < 102){ //drive until 7' away from wall
                ++absoluteCount_;
                if (absoluteCount_ > 20){
                    tickCount_ = -5;
                    System.out.println("W/in 7'. Stopping Bot");
                }
            }
            //--tickCount_;

            // Timer.delay(0.004);

            // I don't know why we need these delays. Typically this sort of delay
            // in a method points out a shortcoming of the framework and makes programs
            // indeterministic. So you could say the suck has been turned up to 11...

        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return tickCount_ == 0;
    }

    // Called once after isFinished returns true
    protected void end() {
        // TODO: Until we get the whole encoder thang worked out,
        // we shouldn't do this.
        // Robot.driveTrain.changeControlMode(CANTalon.TalonControlMode.PercentVbus);

        Robot.driveTrain.enableBrakeMode(false);
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
