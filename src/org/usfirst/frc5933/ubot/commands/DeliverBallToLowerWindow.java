// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.ubot.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5933.ubot.subsystems.*;

/**
 *
 */
public class DeliverBallToLowerWindow extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public DeliverBallToLowerWindow() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
        
        int startingPosition = 0;
        int barrierNumber = 0;
        int lowerWindowPosition = 0;

        // int startingPosition = (int)SmartDashboard.getNumber("Autonomous Starting Position");
        // int barrierNumber = (int)SmartDashboard.getNumber("Autonomous Barrier Number");
        // int lowerWindowPosition = (int)SmartDashboard.getNumber("Autonomous Lower Window Position");
        
        switch (startingPosition) {
        	case 1: {
        		double l1 = 100;
        		double l2= 100;
        		double dg = 45;
        		
        		if (barrierNumber == 2) {
        			l1 += 10;
        		}
        		
                addSequential(new DriveStraight(l1)); // TODO: The inches are not right
                addSequential(new TurnDegrees(dg)); // TODO: The degrees are not right
                addSequential(new DriveStraight(l2)); // TODO: The inches are not right
                addSequential(new ToggleReverseSpindle());
        	} break;
        	case 2: {
        		// TODO: Fill this in with the needed sequence
        	} break;
        	case 3: {
        		// TODO: Fill this in with the needed sequence
        	} break;
        	case 4: {
        		// TODO: Fill this in with the needed sequence
        	} break;
        	case 5: {
        		// TODO: Fill this in with the needed sequence
        	} break;
        	default: {
        		// TODO: Fill this in with the needed sequence
        	} break;
        }
    } 
}
